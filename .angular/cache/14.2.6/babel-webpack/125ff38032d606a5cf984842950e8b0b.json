{"ast":null,"code":"import _asyncToGenerator from \"/Users/audrian/Documents/Programming/GitHub/banking-app-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { lastValueFrom } from 'rxjs';\nimport { startsWithNumValidator } from '../../validators/startsWithNumValidator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../service/api.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\n\nfunction LoginComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"p\", 13);\n    i0.ɵɵtext(2, \"Username cannot be empty\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction LoginComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"p\", 13);\n    i0.ɵɵtext(2, \"At least 5 characters\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction LoginComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"p\", 13);\n    i0.ɵɵtext(2, \"Username must not start with a number\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction LoginComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"p\", 13);\n    i0.ɵɵtext(2, \"Password cannot be empty\");\n    i0.ɵɵelementEnd()();\n  }\n} // @Injectable({\n//   providedIn: 'root'\n// })\n\n\nexport class LoginComponent {\n  constructor(authService, router, apiService) {\n    this.authService = authService;\n    this.router = router;\n    this.apiService = apiService;\n    this.loginForm = new FormGroup({\n      username: new FormControl('', [Validators.required, Validators.minLength(5), startsWithNumValidator()]),\n      password: new FormControl('', [Validators.required, Validators.minLength(3)])\n    });\n  }\n\n  get username() {\n    return this.loginForm.controls['username'];\n  }\n\n  get password() {\n    return this.loginForm.controls['password'];\n  }\n\n  ngOnInit() {// localStorage.clear()\n  }\n\n  onSubmit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // console.log(this.loginForm.getRawValue())\n      let logged = yield lastValueFrom(_this.authService.authLogin(_this.loginForm));\n      if (logged) _this.router.navigate(['/']); // this.authService.authLogin(this.loginForm).subscribe(res => {\n      //   this.router.navigate(['/'])\n      // })\n\n      _this.user = yield lastValueFrom(_this.apiService.getUserByUsername(_this.loginForm.getRawValue().username)); // console.log(this.user)\n\n      _this.loginForm.reset();\n    })();\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ApiService));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 20,\n  vars: 6,\n  consts: [[1, \"d-flex\", \"justify-content-center\"], [1, \"d-inline-flex\", \"flex-column\", \"border\", \"align-items-center\", \"mb-4\", 2, \"width\", \"45%\"], [1, \"bg\", \"bg-dark\", \"text-white\", \"text-center\", \"w-100\", \"py-2\"], [1, \"d-flex\", \"flex-column\"], [3, \"formGroup\", \"ngSubmit\"], [\"for\", \"username\", 1, \"form-label\"], [\"formControlName\", \"username\", \"type\", \"text\", 1, \"form-control\"], [1, \"d-flex\", \"m-1\"], [\"class\", \"alert alert-danger p-1\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"form-label\"], [\"formControlName\", \"password\", \"type\", \"password\", 1, \"form-control\"], [1, \"btn\", \"btn-dark\", \"rounded-pill\", \"mb-2\", 3, \"disabled\"], [1, \"alert\", \"alert-danger\", \"p-1\"], [1, \"m-0\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h5\", 2);\n      i0.ɵɵtext(3, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"form\", 4);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵelementStart(9, \"div\", 7);\n      i0.ɵɵtemplate(10, LoginComponent_div_10_Template, 3, 0, \"div\", 8);\n      i0.ɵɵtemplate(11, LoginComponent_div_11_Template, 3, 0, \"div\", 8);\n      i0.ɵɵtemplate(12, LoginComponent_div_12_Template, 3, 0, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"label\", 9);\n      i0.ɵɵtext(14, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 10);\n      i0.ɵɵelementStart(16, \"div\", 7);\n      i0.ɵɵtemplate(17, LoginComponent_div_17_Template, 3, 0, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"button\", 11);\n      i0.ɵɵtext(19, \" Submit \");\n      i0.ɵɵelementEnd()()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.username.errors == null ? null : ctx.username.errors[\"required\"]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.username.hasError(\"minlength\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.username.hasError(\"startsWithNumValidator\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.password.errors == null ? null : ctx.password.errors[\"required\"]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"mappings":";AACA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,gBAAnD;AAEA,SAASC,aAAT,QAA6B,MAA7B;AAEA,SAASC,sBAAT,QAAuC,yCAAvC;;;;;;;;;;ICcUC,gCAGC,CAHD,EAGC,GAHD,EAGC,EAHD;IAIiBA;IAAwBA;;;;;;IAEzCA,gCAGC,CAHD,EAGC,GAHD,EAGC,EAHD;IAIiBA;IAAqBA;;;;;;IAEtCA,gCAGC,CAHD,EAGC,GAHD,EAGC,EAHD;IAIiBA;IAAqCA;;;;;;IAatDA,gCAGC,CAHD,EAGC,GAHD,EAGC,EAHD;IAIiBA;IAAwBA;;EDlCnD;AACA;AACA;;;AACA,OAAM,MAAOC,cAAP,CAAqB;EAiBzBC,YAAoBC,WAApB,EAAsDC,MAAtD,EAA8EC,UAA9E,EAAoG;IAAhF;IAAkC;IAAwB;IAb9E,iBAAY,IAAIT,SAAJ,CAAc;MACxBU,QAAQ,EAAE,IAAIX,WAAJ,CAAgB,EAAhB,EAAoB,CAACE,UAAU,CAACU,QAAZ,EAAsBV,UAAU,CAACW,SAAX,CAAqB,CAArB,CAAtB,EAA+CT,sBAAsB,EAArE,CAApB,CADc;MAExBU,QAAQ,EAAE,IAAId,WAAJ,CAAgB,EAAhB,EAAoB,CAACE,UAAU,CAACU,QAAZ,EAAsBV,UAAU,CAACW,SAAX,CAAqB,CAArB,CAAtB,CAApB;IAFc,CAAd,CAAZ;EAcE;;EATU,IAARF,QAAQ;IACV,OAAO,KAAKI,SAAL,CAAeC,QAAf,CAAwB,UAAxB,CAAP;EACD;;EAEW,IAARF,QAAQ;IACV,OAAO,KAAKC,SAAL,CAAeC,QAAf,CAAwB,UAAxB,CAAP;EACD;;EAKDC,QAAQ,IACN;EACD;;EAEKC,QAAQ;IAAA;;IAAA;MACZ;MACA,IAAIC,MAAM,SAAShB,aAAa,CAAC,KAAI,CAACK,WAAL,CAAiBY,SAAjB,CAA2B,KAAI,CAACL,SAAhC,CAAD,CAAhC;MACA,IAAGI,MAAH,EAAW,KAAI,CAACV,MAAL,CAAYY,QAAZ,CAAqB,CAAC,GAAD,CAArB,EAHC,CAKZ;MACA;MACA;;MAEA,KAAI,CAACC,IAAL,SAAkBnB,aAAa,CAAC,KAAI,CAACO,UAAL,CAAgBa,iBAAhB,CAAkC,KAAI,CAACR,SAAL,CAAeS,WAAf,GAA6Bb,QAA/D,CAAD,CAA/B,CATY,CAUZ;;MACA,KAAI,CAACI,SAAL,CAAeU,KAAf;IAXY;EAYb;;AApCwB;;;mBAAdnB,gBAAcD;AAAA;;;QAAdC;EAAcoB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCd3BzB,+BAA2C,CAA3C,EAA2C,KAA3C,EAA2C,CAA3C,EAA2C,CAA3C,EAA2C,IAA3C,EAA2C,CAA3C;MAE6DA;MAAKA;MAC9DA,+BAAgC,CAAhC,EAAgC,MAAhC,EAAgC,CAAhC;MACgCA;QAAA,OAAY0B,cAAZ;MAAsB,CAAtB;MAI5B1B;MAAyCA;MAAQA;MACjDA;MAEAA;MACEA;MAMAA;MAMAA;MAMFA;MAEAA;MAAyCA;MAAQA;MACjDA;MAOAA;MACEA;MAOFA;MAEAA;MAIEA;MACFA;;;;MAnDIA;MAAAA;MASCA;MAAAA;MAMAA;MAAAA;MAMAA;MAAAA;MAiBAA;MAAAA;MASHA;MAAAA","names":["FormControl","FormGroup","Validators","lastValueFrom","startsWithNumValidator","i0","LoginComponent","constructor","authService","router","apiService","username","required","minLength","password","loginForm","controls","ngOnInit","onSubmit","logged","authLogin","navigate","user","getUserByUsername","getRawValue","reset","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/audrian/Documents/Programming/GitHub/banking-app-angular/src/app/pages/login/login.component.ts","/Users/audrian/Documents/Programming/GitHub/banking-app-angular/src/app/pages/login/login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { lastValueFrom} from 'rxjs';\nimport { passwordValidator } from '../../validators/passwordValidator';\nimport { startsWithNumValidator } from '../../validators/startsWithNumValidator';\nimport { User } from '../../models/user';\nimport { ApiService } from '../../service/api.service';\nimport { AuthService } from '../../service/auth.service';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\n// @Injectable({\n//   providedIn: 'root'\n// })\nexport class LoginComponent implements OnInit {\n\n  user?: User\n\n  loginForm = new FormGroup({\n    username: new FormControl('', [Validators.required, Validators.minLength(5), startsWithNumValidator()]),\n    password: new FormControl('', [Validators.required, Validators.minLength(3)])\n  })\n\n  get username() {\n    return this.loginForm.controls['username']\n  }\n\n  get password() {\n    return this.loginForm.controls['password']\n  }\n\n  constructor(private authService: AuthService, private router: Router, private apiService: ApiService) {\n   }\n\n  ngOnInit(): void {\n    // localStorage.clear()\n  }\n\n  async onSubmit() {\n    // console.log(this.loginForm.getRawValue())\n    let logged = await lastValueFrom(this.authService.authLogin(this.loginForm))\n    if(logged) this.router.navigate(['/'])\n\n    // this.authService.authLogin(this.loginForm).subscribe(res => {\n    //   this.router.navigate(['/'])\n    // })\n\n    this.user = await lastValueFrom(this.apiService.getUserByUsername(this.loginForm.getRawValue().username)) as User\n    // console.log(this.user)\n    this.loginForm.reset()\n  }\n\n}\n","<!-- <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n  <symbol id=\"exclamation-triangle-fill\" viewBox=\"0 0 80 80\">\n    <path\n      d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"\n    />\n  </symbol>\n</svg> -->\n<div class=\"d-flex justify-content-center\">\n  <div class=\"d-inline-flex flex-column border align-items-center mb-4\" style=\"width: 45%\">\n    <h5 class=\"bg bg-dark text-white text-center w-100 py-2\">Login</h5>\n    <div class=\"d-flex flex-column\">\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n        <!-- {{ loginForm.status }} -->\n        <!-- {{ loginForm.value | json }} -->\n\n        <label for=\"username\" class=\"form-label\">Username</label>\n        <input formControlName=\"username\" type=\"text\" class=\"form-control\" />\n        <!-- {{ username.errors | json }} -->\n        <div class=\"d-flex m-1\">\n          <div\n            *ngIf=\"username.errors?.['required']\"\n            class=\"alert alert-danger p-1\"\n          >\n            <p class=\"m-0\">Username cannot be empty</p>\n          </div>\n          <div\n            *ngIf=\"username.hasError('minlength')\"\n            class=\"alert alert-danger p-1\"\n          >\n            <p class=\"m-0\">At least 5 characters</p>\n          </div>\n          <div\n            *ngIf=\"username.hasError('startsWithNumValidator')\"\n            class=\"alert alert-danger p-1\"\n          >\n            <p class=\"m-0\">Username must not start with a number</p>\n          </div>\n        </div>\n\n        <label for=\"password\" class=\"form-label\">Password</label>\n        <input\n          formControlName=\"password\"\n          type=\"password\"\n          class=\"form-control\"\n        />\n\n        <!-- {{ password.errors | json }} -->\n        <div class=\"d-flex m-1\">\n          <div\n            *ngIf=\"password.errors?.['required']\"\n            class=\"alert alert-danger p-1\"\n          >\n            <p class=\"m-0\">Password cannot be empty</p>\n          </div>\n      \n        </div>\n\n        <button\n          [disabled]=\"loginForm.invalid\"\n          class=\"btn btn-dark rounded-pill mb-2\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module"}