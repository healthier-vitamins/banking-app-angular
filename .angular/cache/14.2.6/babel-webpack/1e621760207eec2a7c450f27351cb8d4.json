{"ast":null,"code":"import { BehaviorSubject, catchError, tap } from 'rxjs';\nimport jwtDecode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./api.service\";\nexport class AuthService {\n  constructor(router, apiService) {\n    this.router = router;\n    this.apiService = apiService;\n    this._isLoggedIn$ = new BehaviorSubject(false);\n    this.isLoggedIn$ = this._isLoggedIn$.asObservable();\n    this._loggedInUsername$ = new BehaviorSubject(\"\");\n    this.loggedInUsername$ = this._loggedInUsername$.asObservable(); // test: string = \"\"\n    // private _loggedInUser$ = new BehaviorSubject<User>(new User());\n    // loggedInUser$ = this._loggedInUser$.asObservable();\n\n    this.TOKEN_NAME = 'token';\n\n    this._isLoggedIn$.next(!!this.token);\n  }\n\n  ngOnInit() {\n    this.user = this.getUser(this.token ? this.token : \"\");\n  } // async loadUserIntoLoggedInUser() {\n  //   let tempUser = await lastValueFrom(this.apiService.getUserByUsername(this.user.username)) as User\n  //   console.log(tempUser)\n  // }\n  // ngDoCheck(): void {\n  //   console.log(\"test\")\n  //   try {\n  //     console.log(\"test\")\n  //     this.roleLogic.roles = this.user.roles\n  //   } catch(err) {\n  //     for(let i = 0; i < localStorage.length - 1; i++) {\n  //       console.log(\"role\" + `${i}`)\n  //       let role = localStorage.getItem(\"role\" + `${i}`)\n  //       this.roleLogic.roles.push(role ? role : \"\")\n  //     }\n  //   }\n  //   if(this.roleLogic.roles.length > 0) {\n  //     this.roleLogic.bool = true\n  //   } else {\n  //     this.roleLogic.bool = false\n  //   }\n  // }\n\n\n  get token() {\n    return localStorage.getItem(this.TOKEN_NAME);\n  }\n\n  authLogin(loginForm) {\n    return this.apiService.doLogin(loginForm) // .subscribe(res => {\n    //   this._isLoggedIn$.next(true);\n    //   localStorage.setItem(this.TOKEN_NAME, res[\"access_token\"]);\n    // })\n    .pipe(tap(res => {\n      this._isLoggedIn$.next(true);\n\n      localStorage.setItem(this.TOKEN_NAME, res.access_token);\n      localStorage.setItem(\"username\", loginForm.getRawValue().username); // console.log(res.access_token)\n\n      this.user = this.getUser(res.access_token); // console.log(this.user.sub)\n\n      this._loggedInUsername$.next(this.user.sub); // console.log(this._loggedInUsername$.getValue())\n      // this.test = this._loggedInUsername$.getValue()\n\n\n      for (let i = 0; i < this.user.roles.length; i++) {\n        localStorage.setItem(`role` + `${i}`, this.user.roles[i].toString());\n      }\n    }), catchError(err => {\n      console.log(err.status);\n\n      if (err.status === 403) {\n        window.alert('Wrong username/password');\n        this.router.navigate(['/login']);\n        return err;\n      }\n    }));\n  } // updateIsLogged(bool: boolean) {\n  //   this._isLoggedIn$.next(bool)\n  //   this._isLoggedIn$.complete()\n  // }\n\n\n  getUser(token) {\n    // console.log(jwtDecode(token))\n    return jwtDecode(token);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ApiService));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,eAAT,EAA0BC,UAA1B,EAAqDC,GAArD,QAAgE,MAAhE;AAGA,OAAOC,SAAP,MAAsB,YAAtB;;;;AAMA,OAAM,MAAOC,WAAP,CAAkB;EAgBtBC,YAAoBC,MAApB,EAA4CC,UAA5C,EAAkE;IAA9C;IAAwB;IAfpC,oBAAe,IAAIP,eAAJ,CAA6B,KAA7B,CAAf;IACR,mBAAc,KAAKQ,YAAL,CAAkBC,YAAlB,EAAd;IAEQ,0BAAqB,IAAIT,eAAJ,CAA4B,EAA5B,CAArB;IACR,yBAAoB,KAAKU,kBAAL,CAAwBD,YAAxB,EAApB,CAWkE,CATlE;IAEA;IACA;;IAEiB,kBAAa,OAAb;;IAKf,KAAKD,YAAL,CAAkBG,IAAlB,CAAuB,CAAC,CAAC,KAAKC,KAA9B;EAED;;EAEDC,QAAQ;IACN,KAAKC,IAAL,GAAY,KAAKC,OAAL,CAAa,KAAKH,KAAL,GAAa,KAAKA,KAAlB,GAA0B,EAAvC,CAAZ;EACD,CAvBqB,CAyBtB;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAGS,IAALA,KAAK;IACP,OAAOI,YAAY,CAACC,OAAb,CAAqB,KAAKC,UAA1B,CAAP;EACD;;EAEDC,SAAS,CAACC,SAAD,EAAqB;IAC5B,OAAO,KAAKb,UAAL,CAAgBc,OAAhB,CAAwBD,SAAxB,EACP;IACA;IACA;IACA;IAJO,CAONE,IAPM,CAQLpB,GAAG,CAAEqB,GAAD,IAAa;MACf,KAAKf,YAAL,CAAkBG,IAAlB,CAAuB,IAAvB;;MACAK,YAAY,CAACQ,OAAb,CAAqB,KAAKN,UAA1B,EAAsCK,GAAG,CAACE,YAA1C;MACAT,YAAY,CAACQ,OAAb,CAAqB,UAArB,EAAiCJ,SAAS,CAACM,WAAV,GAAwBC,QAAzD,EAHe,CAMf;;MACA,KAAKb,IAAL,GAAY,KAAKC,OAAL,CAAaQ,GAAG,CAACE,YAAjB,CAAZ,CAPe,CASf;;MACA,KAAKf,kBAAL,CAAwBC,IAAxB,CAA6B,KAAKG,IAAL,CAAUc,GAAvC,EAVe,CAWf;MAEA;;;MACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKf,IAAL,CAAUgB,KAAV,CAAgBC,MAAnC,EAA2CF,CAAC,EAA5C,EAAgD;QAC9Cb,YAAY,CAACQ,OAAb,CAAqB,SAAS,GAAGK,CAAC,EAAlC,EAAsC,KAAKf,IAAL,CAAUgB,KAAV,CAAgBD,CAAhB,EAAmBG,QAAnB,EAAtC;MACD;IAEF,CAlBE,CARE,EA4BL/B,UAAU,CAAEgC,GAAD,IAAQ;MACjBC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,MAAhB;;MACA,IAAIH,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;QACtBC,MAAM,CAACC,KAAP,CAAa,yBAAb;QACA,KAAKhC,MAAL,CAAYiC,QAAZ,CAAqB,CAAC,QAAD,CAArB;QACA,OAAON,GAAP;MACD;IACF,CAPS,CA5BL,CAAP;EAqCD,CA5FqB,CA8FtB;EACA;EACA;EACA;;;EAEQlB,OAAO,CAACH,KAAD,EAAc;IAC3B;IACA,OAAOT,SAAS,CAACS,KAAD,CAAhB;EACD;;AAtGqB;;;mBAAXR,aAAWoC;AAAA;;;SAAXpC;EAAWqC,SAAXrC,WAAW;EAAAsC,YAFV","names":["BehaviorSubject","catchError","tap","jwtDecode","AuthService","constructor","router","apiService","_isLoggedIn$","asObservable","_loggedInUsername$","next","token","ngOnInit","user","getUser","localStorage","getItem","TOKEN_NAME","authLogin","loginForm","doLogin","pipe","res","setItem","access_token","getRawValue","username","sub","i","roles","length","toString","err","console","log","status","window","alert","navigate","i0","factory","providedIn"],"sourceRoot":"","sources":["/Users/audrian/Documents/Programming/GitHub/banking-app-angular/src/app/service/auth.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, catchError, lastValueFrom, tap } from 'rxjs';\nimport { UserModel } from '../models/user.model';\nimport { ApiService } from './api.service';\nimport jwtDecode from 'jwt-decode';\nimport { User } from '../models/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService implements OnInit{\n  private _isLoggedIn$ = new BehaviorSubject<boolean>(false);\n  isLoggedIn$ = this._isLoggedIn$.asObservable();\n  \n  private _loggedInUsername$ = new BehaviorSubject<string>(\"\");\n  loggedInUsername$ = this._loggedInUsername$.asObservable();\n\n  // test: string = \"\"\n\n  // private _loggedInUser$ = new BehaviorSubject<User>(new User());\n  // loggedInUser$ = this._loggedInUser$.asObservable();\n\n  private readonly TOKEN_NAME = 'token';\n\n  user!: UserModel\n\n  constructor(private router: Router, private apiService: ApiService) {\n    this._isLoggedIn$.next(!!this.token)\n    \n  }\n  \n  ngOnInit(): void {\n    this.user = this.getUser(this.token ? this.token : \"\")\n  }\n\n  // async loadUserIntoLoggedInUser() {\n  //   let tempUser = await lastValueFrom(this.apiService.getUserByUsername(this.user.username)) as User\n  //   console.log(tempUser)\n  // }\n\n  // ngDoCheck(): void {\n  //   console.log(\"test\")\n  //   try {\n  //     console.log(\"test\")\n  //     this.roleLogic.roles = this.user.roles\n  //   } catch(err) {\n  //     for(let i = 0; i < localStorage.length - 1; i++) {\n  //       console.log(\"role\" + `${i}`)\n  //       let role = localStorage.getItem(\"role\" + `${i}`)\n  //       this.roleLogic.roles.push(role ? role : \"\")\n  //     }\n  //   }\n  //   if(this.roleLogic.roles.length > 0) {\n  //     this.roleLogic.bool = true\n  //   } else {\n  //     this.roleLogic.bool = false\n  //   }\n  // }\n\n\n  get token() {\n    return localStorage.getItem(this.TOKEN_NAME)\n  }\n\n  authLogin(loginForm: FormGroup) {\n    return this.apiService.doLogin(loginForm)\n    // .subscribe(res => {\n    //   this._isLoggedIn$.next(true);\n    //   localStorage.setItem(this.TOKEN_NAME, res[\"access_token\"]);\n    // })\n\n\n    .pipe(\n      tap((res: any) => {\n        this._isLoggedIn$.next(true);\n        localStorage.setItem(this.TOKEN_NAME, res.access_token);\n        localStorage.setItem(\"username\", loginForm.getRawValue().username)\n\n\n        // console.log(res.access_token)\n        this.user = this.getUser(res.access_token) \n\n        // console.log(this.user.sub)\n        this._loggedInUsername$.next(this.user.sub)\n        // console.log(this._loggedInUsername$.getValue())\n\n        // this.test = this._loggedInUsername$.getValue()\n        for(let i = 0; i < this.user.roles.length; i++) {\n          localStorage.setItem(`role` + `${i}`, this.user.roles[i].toString())\n        }\n        \n      })\n      ,\n      catchError((err) => {\n        console.log(err.status);\n        if (err.status === 403) {\n          window.alert('Wrong username/password');\n          this.router.navigate(['/login']);\n          return err;\n        }\n      })\n    );\n  }\n\n  // updateIsLogged(bool: boolean) {\n  //   this._isLoggedIn$.next(bool)\n  //   this._isLoggedIn$.complete()\n  // }\n\n  private getUser(token: string) {\n    // console.log(jwtDecode(token))\n    return jwtDecode(token) as UserModel\n  }\n\n  // if(err.status === 401) {\n  //   window.alert(\"forbidden\")\n  //   this.router.navigate(['/'])\n  //   return err\n  // }\n  \n  // hasRole(role: string): boolean {\n  //   try {\n  //     if(this.roleLogic.bool) return true\n  //     return false\n  //   } catch(err) {\n  //     console.log(err)\n  //     const roles: string[] = this.roleLogic.roles\n  //     console.log(roles)\n  //     if(roles?.includes(role)) return true\n  //     return false\n  //   }\n  // }\n\n}\n"]},"metadata":{},"sourceType":"module"}